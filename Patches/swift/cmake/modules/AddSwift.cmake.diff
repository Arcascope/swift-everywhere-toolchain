diff --git a/cmake/modules/AddSwift.cmake b/cmake/modules/AddSwift.cmake
index bb87ff602cd640b44a20f078d9f37f70fcfd1222..0d98e23ada65aac385bae589119405f6ca0c9f52 100644
--- a/cmake/modules/AddSwift.cmake
+++ b/cmake/modules/AddSwift.cmake
@@ -1096,6 +1096,10 @@ function(_add_swift_library_single target name)
     set_target_properties("${target}"
       PROPERTIES
       INSTALL_RPATH "$ORIGIN:/usr/lib/swift/cygwin")
+  elseif("${SWIFTLIB_SINGLE_SDK}" STREQUAL "ANDROID")
+    # Cmake generates incorrect rule `$SONAME_FLAG $INSTALLNAME_DIR$SONAME` for Android build on macOS cross-compile host.
+    # Proper linker flags constructed manually. See below variable `swiftlib_link_flags_all`.
+    set_target_properties("${target}" PROPERTIES NO_SONAME true)
   endif()
 
   set_target_properties("${target}" PROPERTIES BUILD_WITH_INSTALL_RPATH YES)
@@ -1882,6 +1886,16 @@ function(add_swift_target_library name)
        NOT ${name} STREQUAL swiftRemoteMirror)
       list(APPEND swiftlib_link_flags_all "-Wl,-z,defs")
     endif()
+    # Setting back linker flags which are not supported when making Android build on macOS cross-compile host.
+    if(SWIFTLIB_SHARED)
+      if(sdk IN_LIST SWIFT_APPLE_PLATFORMS)
+        list(APPEND swiftlib_link_flags_all "-dynamiclib -Wl,-headerpad_max_install_names")
+      elseif(sdk STREQUAL ANDROID)
+        list(APPEND swiftlib_link_flags_all "-shared")
+        # TODO: Instead of `lib${name}.so` find variable or target property which already have this value.
+        list(APPEND swiftlib_link_flags_all "-Wl,-soname,lib${name}.so")
+      endif()
+    endif()
 
     set(sdk_supported_archs
       ${SWIFT_SDK_${sdk}_ARCHITECTURES}
@@ -2114,6 +2128,15 @@ function(add_swift_target_library name)
                                    ARCHIVE DESTINATION "lib${LLVM_LIBDIR_SUFFIX}/${resource_dir}/${resource_dir_sdk_subdir}/${SWIFT_PRIMARY_VARIANT_ARCH}"
                                    COMPONENT "${SWIFTLIB_INSTALL_IN_COMPONENT}"
                                    PERMISSIONS ${file_permissions})
+      elseif(sdk STREQUAL ANDROID)
+        foreach(arch ${SWIFT_SDK_ANDROID_ARCHITECTURES})
+          set(UNIVERSAL_LIBRARY_NAME "${SWIFTLIB_DIR}/${SWIFT_SDK_${sdk}_LIB_SUBDIR}/${arch}/${CMAKE_SHARED_LIBRARY_PREFIX}${name}.so")
+          swift_install_in_component(FILES "${UNIVERSAL_LIBRARY_NAME}"
+                                     DESTINATION "lib${LLVM_LIBDIR_SUFFIX}/${resource_dir}/${resource_dir_sdk_subdir}/${arch}"
+                                     COMPONENT "${SWIFTLIB_INSTALL_IN_COMPONENT}"
+                                     PERMISSIONS ${file_permissions}
+                                     "${optional_arg}")
+        endforeach()
       else()
         swift_install_in_component(FILES "${UNIVERSAL_LIBRARY_NAME}"
                                    DESTINATION "lib${LLVM_LIBDIR_SUFFIX}/${resource_dir}/${resource_dir_sdk_subdir}"
